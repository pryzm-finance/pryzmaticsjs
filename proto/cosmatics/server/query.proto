syntax = "proto3";
package cosmatics.server;

import "google/api/annotations.proto";
import "cosmatics/server/sync_state.proto";
import "cosmatics/server/metric.proto";
import "cosmatics/server/transaction.proto";
import "cosmatics/server/health_check.proto";
import "cosmatics/server/block_sync_failure.proto";
import "cosmatics/server/post_process_failure.proto";
import "tendermint/types/block.proto";
import "tendermint/blocksync/types.proto";
import "cosmos/tx/v1beta1/service.proto";


option go_package = "github.com/refractedlabs/cosmatics/server";

service Query {
  rpc SyncState(QuerySyncStateRequest) returns (QuerySyncStateResponse) {
    option (google.api.http).get = "/cosmatics/sync_state";
  }

  rpc Block(tendermint.blocksync.BlockRequest) returns (tendermint.types.Block) {
    option (google.api.http).get = "/cosmatics/block/{height}";
  }

  rpc Transaction(cosmos.tx.v1beta1.GetTxRequest) returns (cosmos.tx.v1beta1.GetTxResponse) {
    option (google.api.http).get = "/cosmatics/transaction/{hash}";
  }

  rpc TransactionStatus(QueryTransactionStatusRequest) returns (QueryTransactionStatusResponse) {
    option (google.api.http).get = "/cosmatics/transaction_status/{hash}";
  }

  rpc TransactionByEvent(cosmos.tx.v1beta1.GetTxsEventRequest) returns (cosmos.tx.v1beta1.GetTxsEventResponse) {
    option (google.api.http).get = "/cosmatics/transaction";
  }

  rpc Metrics(QueryMetricsRequest) returns (QueryMetricsResponse) {
    option (google.api.http).get = "/cosmatics/metric";
  }

  rpc HealthCheck(QueryHealthCheckRequest) returns (QueryHealthCheckResponse) {
    option (google.api.http).get = "/cosmatics/health";
  }

  rpc BlockSyncFailures(QueryBlockSyncFailuresRequest) returns (QueryBlockSyncFailuresResponse) {
    option (google.api.http).get = "/cosmatics/block_sync_failure";
  }

  rpc PostProcessFailures(QueryPostProcessFailuresRequest) returns (QueryPostProcessFailuresResponse) {
    option (google.api.http).get = "/cosmatics/post_process_failure";
  }
}
